// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// pasted from planetscale
generator client {
  provider = "prisma-client-js"
}

// pasted from planetscale
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// create a model for a tweet
model Tweet {
  id        String   @id @default(uuid())
  userId    String
  content   String
  createdAt DateTime @default(now())

  user User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Like Like[]

  @@index([userId])
}

// create a model for a like
model Like {
  userId  String
  tweetId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet   Tweet  @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  @@id([userId, tweetId])
  @@index([userId])
  @@index([tweetId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  // we add this:
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // we add this:
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Non Next Auth
  tweets    Tweet[]
  likes     Like[]
  // by giving them the same relation name we are saying they are linked to one another
  // all the followers of one user are linked up to the follows of another user that they are actually following
  // these two simple lines allow us the ability to follow different users
  followers User[]  @relation(name: "Followers")
  follows   User[]  @relation(name: "Followers")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
